<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research: Program Analytics: Using Trace Data for Localization, Explanation and Synthesis</AwardTitle>
<AwardEffectiveDate>06/15/2018</AwardEffectiveDate>
<AwardExpirationDate>05/31/2022</AwardExpirationDate>
<AwardAmount>150382</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol J. Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Formal program analyses have long held out the promise of lowering the cost of&lt;br/&gt;creating, maintaining and evolving programs. However, many crucial analysis&lt;br/&gt;tasks, such as localizing the sources of errors or suggesting code repairs, are&lt;br/&gt;inherently ambiguous: there is no unique right answer. This ambiguity&lt;br/&gt;fundamentally restricts the wider adoption of formal tools by limiting users to&lt;br/&gt;those with enough expertise to effectively use such ambiguous results. The key&lt;br/&gt;insight is that data-driven machine-learning approaches, which have proved&lt;br/&gt;successful in other domains, can be applied to the data traces generated by&lt;br/&gt;programmers as they carry out development tasks. This research addresses the&lt;br/&gt;challenge of ambiguity by extending classical program analysis into modern&lt;br/&gt;program analytics. This extension enhances classical symbolic methods with&lt;br/&gt;modern data-driven approaches to collectively learn from fine-grained traces of&lt;br/&gt;programmers interacting with compilers or analysis tools to iteratively modify&lt;br/&gt;and fix software.&lt;br/&gt;&lt;br/&gt;The research systematically develops program analytics by pursuing research&lt;br/&gt;along two dimensions: language domains and programming tasks. First, it studies&lt;br/&gt;different language domains, from dynamically typed languages (Python), to&lt;br/&gt;statically typed functional languages with contract systems (Haskell), to&lt;br/&gt;interactive proof assistants (Coq). Second, it targets different programming&lt;br/&gt;tasks, from localizing errors like null-dereferences, assertions or other&lt;br/&gt;dynamic type failures, to static type errors, to completing or fixing code to&lt;br/&gt;eliminate an error or to obtain some desired functionality. This approach takes&lt;br/&gt;advantage of a suite of new approaches that harness recent advances in&lt;br/&gt;statistical machine learning and fine-grained, domain specific programmer&lt;br/&gt;interactions. These advantages allow the research to address the fundamental&lt;br/&gt;problem of ambiguity in classical program analysis. This has potential to&lt;br/&gt;transform software development by yielding a new generation of program analysis&lt;br/&gt;tools that are efficient, applicable, and automatically customizable (e.g., to a&lt;br/&gt;particular company, project, group or even individual).&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>05/03/2018</MinAmdLetterDate>
<MaxAmdLetterDate>05/03/2018</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>1763674</AwardID>
<Investigator>
<FirstName>Westley</FirstName>
<LastName>Weimer</LastName>
<EmailAddress>weimerw@umich.edu</EmailAddress>
<StartDate>05/03/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Michigan Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
</Institution>
<ProgramElement>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
</Award>
</rootTag>
