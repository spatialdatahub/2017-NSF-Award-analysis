<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: The Loop Chain Abstraction for Balancing Locality and Parallelism</AwardTitle>
<AwardEffectiveDate>08/16/2016</AwardEffectiveDate>
<AwardExpirationDate>01/31/2018</AwardExpirationDate>
<AwardAmount>259994</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: The Loop Chain Abstraction for Balancing Locality and Parallelism&lt;br/&gt;&lt;br/&gt;Computational science, which involves modeling and simulation of phenomena such as combustion in engines, has become the third pillar of science and engineering research. Computer simulations test design parameters much more cheaply than physical experiments.  Also, computer simulations participate in a fortuitous cycle with theory by enabling inexpensive experimentation of theoretical models.  Mapping computer simulations to high performance computer architectures is a challenging computer science problem; constraints include achieving high performance and effective use of computing resources while not overburdening scientific programmers.  This challenge is becoming more severe as architectures continue to evolve in ways that make them ever more difficult to use.  In this project, the PIs will remove programmer burden by developing a programming abstraction called loop chaining, which enables architecture-specific program optimizations by compilers.  This work enables scientists to spend less time dealing with annoying performance programming details and more time evolving their scientific models that help push science and engineering forward.&lt;br/&gt;&lt;br/&gt;Exposing opportunities for parallelization while explicitly managing data locality is the primary challenge to porting and optimizing existing computational science simulation codes. The most popular programming models used in these codes such as MPI (Message Passing Interface) require that programmers explicitly determine the data and computation distribution. This has led to good scaling between compute nodes, but parallelism and locality are needed within a node as well. There are many approaches for implementing shared memory parallelism, but with most of them it is the programmer's responsibility to group computations to improve data locality. This project focuses on the development of the loop chain abstraction to provide compilers with sufficient information to automate the parallelism versus data locality tradeoff.  Preliminary results show that using the loop chain abstraction can significantly improve parallel scalability.  The intellectual merits are that the loop chain abstraction will enable existing codes to maintain their software modularity while exposing information critical to performance optimizations that improve parallel scalability.  Some important contributions of this research are the re-casting of existing program optimizations to use the loop chain abstraction as input and the eventual incorporation of the loop chain abstraction into parallel programming languages.  The broader impacts include reducing the burden on scientists developing computational simulations, sharing the developed compiler prototypes as open-source software, and providing tutorials for doing source-to-source loop chain-based tiling transformations in C++ and Fortran code.  The testbed for loop chaining will include atmospheric science, materials, and combustion codes, therefore tunable versions of these applications will be released.  Additionally, a new course module will be developed, through which students will be trained in computational science and specifically, on how to expose loop chains within simulation software.</AbstractNarration>
<MinAmdLetterDate>10/28/2016</MinAmdLetterDate>
<MaxAmdLetterDate>10/28/2016</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>1700723</AwardID>
<Investigator>
<FirstName>Catherine</FirstName>
<LastName>Olschanowsky</LastName>
<EmailAddress>cathie@cs.boisestate.edu</EmailAddress>
<StartDate>10/28/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Boise State University</Name>
<CityName>Boise</CityName>
<ZipCode>837250001</ZipCode>
<PhoneNumber>2084261574</PhoneNumber>
<StreetAddress>1910 University Drive</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Idaho</StateName>
<StateCode>ID</StateCode>
</Institution>
<ProgramElement>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
</Award>
</rootTag>
