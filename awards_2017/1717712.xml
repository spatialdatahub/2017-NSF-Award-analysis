<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Data Structures and Transactions for Emerging Nonvolatile Memory</AwardTitle>
<AwardEffectiveDate>09/01/2017</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardAmount>449937</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Data that need to be persistent, either for the sake of long-term access or for recovery from system crashes, have traditionally been kept on disk and flash drives, which are very slow.  Within the next few years, much faster persistent memory is expected to be widely available at reasonable cost, raising the possibility that file systems might be replaced, at least in part, by memory that is simply "always available." The intellectual merits of the project lie in addressing two key challenges to such "always available memory": first, ensuring that the values in memory in the wake of a system crash are always mutually consistent, despite the possibility that traditional caches often pass data to the memory out of order; second, safeguarding the structural integrity of persistent data despite the possibility that buggy programs may erroneously modify arbitrary memory locations.  The project's broader significance and importance lie in the promise of significant improvements in programmability, reliability, and system performance, and in the ability to survive power outages and hardware failures at much lower cost than has previously been possible.  This latter benefit may be of particular importance for ubiquitous sensors in the Internet of Things.&lt;br/&gt;&lt;br/&gt;The project builds on prior work by the principal investigator and colleagues, which has developed formal correctness criteria for persistent data, together with automatic methods to guarantee this correctness.  The current project is pursuing three major research thrusts.  First, it is developing a library of reusable, high-performance persistent data structures, with particular emphasis on exploiting high-level semantics to minimize instrumentation overhead, maintaining sufficient information to complete or undo partial operations in the wake of a program or system crash, and formalizing and proving correctness.  Second, the project is developing techniques to compose persistent operations into larger atomic transactions.  This work builds on past experience with hardware and software transactional memory, and encompasses both nonblocking and lock-based approaches.  Particular emphasis is being placed on "boosting" the operations of persistent data structures so that they can serve as reversible high-level operations of a transactional system.  Third, the project is developing mechanisms (including user-level daemons, compiler-based sandboxing, fine-grain memory protection, and the use of virtualization hardware) to ensure that persistent data is modified only by trusted library code, thereby safeguarding its structural integrity in the presence of buggy applications.</AbstractNarration>
<MinAmdLetterDate>07/07/2017</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2017</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>1717712</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Scott</LastName>
<EmailAddress>scott@cs.rochester.edu</EmailAddress>
<StartDate>07/07/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Rochester</Name>
<CityName>Rochester</CityName>
<ZipCode>146270140</ZipCode>
<PhoneNumber>5852754031</PhoneNumber>
<StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<ProgramElement>
<Code>7354</Code>
<Text>Computer Systems Research (CSR</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
</Award>
</rootTag>
